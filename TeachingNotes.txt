2023-09-18_BankOfCanada_TeachingNotes.txt

Exploring bocdaz.ca's VM environment
------------------------------------
- there are some standard existing directories living in the VM
- Need to look in the "Documents" directory to see what is there

---
City of Toronto: traditional territory of many nations including the Mississaugas of the Credit, the Anishnabeg, the Chippewa, the Haudenosaunee and the Wendat peoples and is now home to many diverse First Nations, Inuit and MÃ©tis peoples. The City also acknowledges that Toronto is covered by Treaty 13 signed with the Mississaugas of the Credit, and the Williams Treaties signed with multiple Mississaugas and Chippewa bands.

===============================

----------------
PREP 20 mins before class
----------------

Data Files
<20lines.txt>
<Names.txt>
<shelldata.tsv>
<chap01.txt>
<Git_and_GitHub_concept_maps.png>

- Turn on laptop.
- On personal computer, go to Settings > System > Display, and set up extending window 
   to two monitors. Put video conferenceing software onto laptop screen and BOCDAZ VM maching on large monitor.
- Sign in to https://bocdaz.ca
- Initiate VM and wait for it to start
- make sure git concept map file in in Documents folder
- Have print out of lesson script ready
- Open Microsoft Teams

- Open Notepad++
- Open Git Bash
- Open Firefox and have following tabs open:
	- LC Unix Shell lesson website
	- Etherpad for the class





--------------------------
UNIX SHELL teaching notes:
--------------------------
- check VM desktop with some Unix commands: pwd, ls, ls -a, ls -l, ls -F
- find out if there are any files in the working directory already or not; 
	are each users directory empty when they start their VM?; will data files persist from one day to the next?
- may need to make some data files to use in teaching Unix
- decide what to teach given only half the time
- to get help:
	- Mac and Linux: man [command]
	- Windonws [command] --help or <http://man.he.net/>


Topics We'll Cover:
--------------------
Intro: what is shell and why should I use it?

	- What is a "shell"?
		- interface/medium to interact with the Unix system/kernal
		- gathers input from users, executes the program based on input, displays output
		- an environment in which we run commands, programs, shell scripts
		- "shell" which wraps around the kernel?

	- Why the shell?
		- speed, it's fast
		- batch operations, handles repetitive tasks easily
		- communicating with remote machines and high-performance computers
		- it allow for scripting, writing "programs" which can be used again and again; reproducability
		- good intro to other languages and tools like python, R, OpenRefine, etc.


	- GUI & CLI & Unix Bash (many flavours of shell, we will be teaching Bash)
	- directories ("folders") 
	- paths, absolute and relative

	- the prompt
		$	shell is waiting for your instructions
		>	shell is working on a task or awaiting more input

	- Syntax (Grammar)
		
		COMMAND [-option(s)/flag(s)] [ARGUMENT(S)]

			options modify your COMMAND
			COMMANDs work on ARGUMENTs

		VERB [-adverb(s)]  [OBJECT(S)]
		
	- type [command]  tells you what type of command it is
	- which [command]   tells you where it is (usually in /usr/bin/type )
	- Finding help
		- Internet: man(ual) pages
		- Mac and Linux: man [command]
		- Windonws [command] --help 
	- Getting OUt/Stopping Things: CTRL+C (cancel), CTRL+X (exit), Q (quit)
	- 
- Navigating the Shell
	- shell prompt $ and >
	- pwd
	- ls
	- cd

	- tab completion
	- cd .., cd ~, cd \, cd - (go to previous directory, not one level up)
	
- Working with files and folders
	- ls
		- best practise filenaming convention: 
			- No spaces. Spaces have special meaning in Unix and other languages. 
				Use underscore, hyphen, camel case, or no seperation
			- Use descriptive filenames ("The future you"). Also the reason you keep
				good notes about what you did and why (git commit messages)
			- Use descriptive file extensions (.txt | .csv | .tsv | .doc | .mp3 )

	- mkdir
	- cd, cd .., cd ~, cd \
	- cat
	- head
	- tail
	- less
	- reusing a command
		- up arrow
		- history
		- !xxx
	- wildcards: *.*, *.txt (short hint about regular expressions, pattern matching, wildcards on steroids)
	- mv
	- cp
	- echo (useful to show expansion before executing command for real)
	- brace expansion  e.g. echo {1..10}
- Loops
	- Basic for/do/done Loop
	- semi-colon btw lines of code (computer doesn't care about human legibility, but we humans do)
	- optional indentation (not optional in Python) but good for human legibility
	- variables
	- double-quoting variable substitutions (to account for spaces in filenames)
- Shell/Bash scripts
- Counting and mining data
	- file types and file extensions
		- txt
		- csv
		- tsv
	- counting
		- wc 
	- sorting
		- numeric (-n) and lexical sorting
		- wc -l *.tsv | sort -n
	- pipes and filters
	- input and output
		- standard
		- writing output to a file
		- appending output to a file
	- searching (mining)
		- strings
		- grep   (global regular expression print)
		- case sensitive searches, case insensitive searches
		- uniq (unique)
		- selecting columns from rows of data
	- working with unstructured text (structured vs unstructured data)









- what commands or concepts are need for Git?
	- directorys (have to be in working directory where your data is; useful also for python)
	- syntax of Unix, leads to syntax for git, and later python
	- pwd, to know where you are
	- navigation up and down directory tree
		- ~ tilda
		- cd ..
		- cd .
	
	
	
Data ... Institute SHell Lesson Notes
-----------------------------------------
Lesson Plan and Goals

1. Introduction to the Shell

GUI
CLI & Unix Bash
Why learn CLI
	- batch operations
	- speed
	- communicating with remote and high-performance computers
	- good intro to other languages and tools like python, R, OpenRefine, etc.
the prompt
ECHO
Syntax
standard input and standard output
Getting out: CTRL+C (cancel), CTRL+X (exit), Q (quit)
-------

What is a "shell"?
- command line interface/medium to interact with the Unix system/kernal
- gathers input from users, executes the program based on input, displays output
- an environment in which we run commands, programs, shell scripts
- "shell" which wraps around the kernel?


Why the shell?
- it's fast
- it handles repetitive tasks easily
- it allow for scripting, writing "programs" which can be used again and again; reproducability
- used to communicate with remote machines and high performance computers


Simplified schematic for the "layers" of the Unix cake from top to bottom:

	------------------------
	You
	------------------------
	terminal emulator 
	("MINGW64" for Git Bash on PCs,"Terminal" for Macs)
	------------------------
	shell (Unix Bash)
	------------------------
	kernel
	------------------------
	hardware
	------------------------


2. Navigation
Syntax review
the bash prompt $   (echo $PS1)
pwd		print working directory
whoami	print profile ID
ls		and its many flags (-F, -l, -a, -h)  
			/ = directory
			* = link
			@ = executeable		
the manual/getting help 	(PC) command --help ; (MAC & linux) man comand
clear	clear screen	
cd		change directory
tab completion
	up arrow, previous command
	history
	moving around in a line: 
paths, absolute and relative
short cuts to places
	~	home directory
	..	parent directory
	.	current directory
	-	previous directory
	/	root directory
	



BREAK


3. Working with Files and Directories

mkdir	make directory
mv		move or rename
cp		copy 
rm		remove: only works with files; BEWARE, no undo, no trash bin.
		Unix assumes you are smart and know what you are doing.
wildcards & shell expansion, ECHO
	*
	?
	(Regex is wildcards on steroids, more later)
brace expansion


BREAK


4.  Pipes and Filters (Sort)

	wc		and its flags, one file, multiple files, flags
	>		redirect vs standard output
	>>		append
	cat		join and print
	less	a pager routine
	sort	and its flags
	|		pipe
	head	default n=10  	[head -n 5]
	tail	default n=10	[tail -n 5]
	

5. Regex and Loops






6. Shell Scripts




BOOKMARKS:

https://etherpad.wikimedia.org/p/2022-05-13_DSI_Shell_Lesson
https://oit.ua.edu/wp-content/uploads/2020/12/Linux_bash_cheat_sheet-1.pdf
https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh
https://devhints.io/bash
https://swcarpentry.github.io/shell-novice/setup.html
https://swcarpentry.github.io/shell-novice/


=========================================================
	

GIT teaching notes
- talk about origins of git in programmers world (Linus Torvald, creator of Linux, for version control and managing code contributions from collaborators around the world), hence strange jargon
- jargon
	- repo: repository
	- add
	- staging area
	- commit
	- push (from your perspective), think of a pipeline metaphor, you are pushing something away from you towards somewhere else
	- pull (from your perspective), think of a pipeline metaphor, you are pulling something towards you from somewhere else
	- branch
	- status
	- clone: make a copy of a someone's repo and put it on your home computer
	- fork: make a copy of someone's repo and put it in your GitHub account\
	- "master" (yes, the master/slave metaphor was used in or "main" branch
	- remote
	- origin
	- git workflow
- syntax:  git command [argument]
- ways of interacting with Git: command line and GUI software (including basic one which comes with your GIT BASH, Git CMD is Windows CMD, Git Bash is Unix/Linux)
- useful resources: 
	- Pro-Git book, free, online and ebook <https://git-scm.com/book/en/v2> Also a paper published version at bookstores.
	- GitHub's Docs and Getting Started Documents <https://docs.github.com/en>
	- SourceTree's intro to git from 
	
		
--------------
Bash script to replace spaces with underscores in filenames:
<https://stackoverflow.com/questions/2709458/how-to-replace-spaces-in-file-names-using-a-bash-script>

I use:

for f in *\ *; do mv "$f" "${f// /_}"; done

Though it's not recursive, it's quite fast and simple. I'm sure someone here could update it to be recursive.

The ${f// /_} part utilizes bash's parameter expansion mechanism to replace a pattern within a parameter with supplied string. The relevant syntax is ${parameter/pattern/string}. See: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html or http://wiki.bash-hackers.org/syntax/pe .

-----------------------